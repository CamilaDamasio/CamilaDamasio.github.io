{"ast":null,"code":"import _regeneratorRuntime from\"/home/camila/Repositorios_GitHub/project-recipes-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/camila/Repositorios_GitHub/project-recipes-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import fetchAPIMeal from'../../utils/fetchAPiMeal';export var GET_API_MEAL='GET_API_MEAL';export var GET_API_MEAL_SUCESS='GET_API_MEAL_SUCESS';export var GET_API_MEAL_ERROR='GET_API_MEAL_ERROR';export var SWITCH_SEARCH='SWITCH_SEARCH';export var getAPIMeal=function getAPIMeal(){return{type:GET_API_MEAL};};export var getAPIMealSucess=function getAPIMealSucess(payload){return{type:GET_API_MEAL_SUCESS,payload:payload};};export var getAPIMealError=function getAPIMealError(error){return{type:GET_API_MEAL_ERROR,payload:error};};export var switchSearch=function switchSearch(search,searchType){return{type:SWITCH_SEARCH,payload:{search:search,searchType:searchType}};};export var getMeal=function getMeal(){var search=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';var type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'Nome';return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var fetchAPI;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch(getAPIMeal());_context.prev=1;_context.next=4;return fetchAPIMeal(search,type);case 4:fetchAPI=_context.sent;dispatch(getAPIMealSucess(fetchAPI));_context.next=11;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](1);dispatch(getAPIMealError(_context.t0));case 11:case\"end\":return _context.stop();}}},_callee,null,[[1,8]]);}));return function(_x){return _ref.apply(this,arguments);};}();};","map":{"version":3,"sources":["/home/camila/Repositorios_GitHub/project-recipes-app/src/redux/actions/actionAPIMeal.js"],"names":["fetchAPIMeal","GET_API_MEAL","GET_API_MEAL_SUCESS","GET_API_MEAL_ERROR","SWITCH_SEARCH","getAPIMeal","type","getAPIMealSucess","payload","getAPIMealError","error","switchSearch","search","searchType","getMeal","dispatch","fetchAPI"],"mappings":"mVAAA,MAAOA,CAAAA,YAAP,KAAyB,0BAAzB,CAEA,MAAO,IAAMC,CAAAA,YAAY,CAAG,cAArB,CACP,MAAO,IAAMC,CAAAA,mBAAmB,CAAG,qBAA5B,CACP,MAAO,IAAMC,CAAAA,kBAAkB,CAAG,oBAA3B,CACP,MAAO,IAAMC,CAAAA,aAAa,CAAG,eAAtB,CAEP,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,SAAO,CAC/BC,IAAI,CAAEL,YADyB,CAAP,EAAnB,CAIP,MAAO,IAAMM,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,OAAD,QAAc,CAC5CF,IAAI,CAAEJ,mBADsC,CAE5CM,OAAO,CAAPA,OAF4C,CAAd,EAAzB,CAKP,MAAO,IAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,QAAY,CACzCJ,IAAI,CAAEH,kBADmC,CAEzCK,OAAO,CAAEE,KAFgC,CAAZ,EAAxB,CAKP,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,MAAD,CAASC,UAAT,QAAyB,CACnDP,IAAI,CAAEF,aAD6C,CAEnDI,OAAO,CAAE,CACPI,MAAM,CAANA,MADO,CAEPC,UAAU,CAAVA,UAFO,CAF0C,CAAzB,EAArB,CAQP,MAAO,IAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,MAACF,CAAAA,MAAD,2DAAU,EAAV,IAAcN,CAAAA,IAAd,2DAAqB,MAArB,gGAAgC,iBAAOS,QAAP,+HACrDA,QAAQ,CAACV,UAAU,EAAX,CAAR,CADqD,sCAG5BL,CAAAA,YAAY,CAACY,MAAD,CAASN,IAAT,CAHgB,QAG7CU,QAH6C,eAInDD,QAAQ,CAACR,gBAAgB,CAACS,QAAD,CAAjB,CAAR,CAJmD,+EAMnDD,QAAQ,CAACN,eAAe,aAAhB,CAAR,CANmD,oEAAhC,gEAAhB","sourcesContent":["import fetchAPIMeal from '../../utils/fetchAPiMeal';\n\nexport const GET_API_MEAL = 'GET_API_MEAL';\nexport const GET_API_MEAL_SUCESS = 'GET_API_MEAL_SUCESS';\nexport const GET_API_MEAL_ERROR = 'GET_API_MEAL_ERROR';\nexport const SWITCH_SEARCH = 'SWITCH_SEARCH';\n\nexport const getAPIMeal = () => ({\n  type: GET_API_MEAL,\n});\n\nexport const getAPIMealSucess = (payload) => ({\n  type: GET_API_MEAL_SUCESS,\n  payload,\n});\n\nexport const getAPIMealError = (error) => ({\n  type: GET_API_MEAL_ERROR,\n  payload: error,\n});\n\nexport const switchSearch = (search, searchType) => ({\n  type: SWITCH_SEARCH,\n  payload: {\n    search,\n    searchType,\n  },\n});\n\nexport const getMeal = (search = '', type = 'Nome') => async (dispatch) => {\n  dispatch(getAPIMeal());\n  try {\n    const fetchAPI = await fetchAPIMeal(search, type);\n    dispatch(getAPIMealSucess(fetchAPI));\n  } catch (error) {\n    dispatch(getAPIMealError(error));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}